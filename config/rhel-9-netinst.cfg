# Red Hat Enterprise Linux 9 Kickstart
# for Build Smallest (but a little optimized for Japanese) Configuration
# Version 0.2
# 
# Requirement:
#  - Prepare your RHEL private mirror server
#  - UEFI boot
#  - Install disk is attached with NVMe Interface
# 
# Optimized for Japanese:
#  - Timesource (NTP) is NICT, Japan
#  - Installation source from mirror in Japan.
#      (Only during installation.
#       Does not affect behavior after installation)
#  - Includes "glibc-langpack-ja" package.
#    To be able to use on RHEL9, adds 1 configuration file
# 
# Author: Yutenji (yuta@59RY.jp, https://github.com/59RY)
# 
# In AWS Tokyo (ap-northeast-1) region,
# you can find AMIs used this kickstart from here:
#  - https://ap-northeast-1.console.aws.amazon.com/ec2/home?region=ap-northeast-1#Images:visibility=public-images;owner=708780754938;search=:Red%20Hat,:BYOL;v=3
# Appeal: You can create more small volumes than official AMIs. (Starts from 2 GiB!)
#
# CAUTION:
#  - Fill your IP address (or FQDN) you prepared your private mirror server.
#    It mayn't work as this file isn't modified.
#  - This file shouldn't remain to disk image.
#    (Because of recording your IP/FQDN in this file)

# Use text mode install
text

# Keyboard layouts
keyboard --xlayouts='us'

# System language
lang en_US.UTF-8

# (Not write a network information because of auto configuration)

# NTP
timesource --ntp-pool=ntp.nict.jp
timesource --ntp-pool=ntp.jst.mfeed.ad.jp

# System timezone
timezone Etc/UTC --utc

# Use network installation
#   (This is required. Without this, netinst won't work)
#   (Fill your IP address or FQDN here)
url --url="http://<YOUR_MIRROR_SERVER_IP>/rhel-9-for-$basearch-baseos-rpms/"
repo --name appstream --baseurl "http://<YOUR_MIRROR_SERVER_IP>/rhel-9-for-$basearch-appstream-rpms/"

# Select necessary packages at this section.
#   (I know the required disk space will increase as many as written here.
#    But there's only way to add packages without Red Hat subscriptions)
%packages
cloud-init
cloud-utils-growpart
dracut-config-generic
glibc-langpack-ja
bash-completion
%end

# Run the Setup Agent on first boot
firstboot --disable

# Configure how to use the disk.
# This is generated using Blivet version 3.4.0
ignoredisk --only-use=nvme0n1
clearpart --none --initlabel
part /boot/efi --fstype="efi" --ondisk=nvme0n1 --size=50 --fsoptions="umask=0077,shortname=winnt"
part / --fstype="xfs" --ondisk=nvme0n1 --grow

# Modify Bootloader
bootloader --timeout=1 --append="no_timer_check console=tty0 console=ttyS0,115200n8"

# Add-on
%addon com_redhat_kdump --disable
%end

# Root password
#   (it's tentative, so this password will be deleted in the end)
rootpw --plaintext redhat-redhat

# Enforce SELinux
selinux --enforcing

# Disable firewalld
firewall --disabled

# Post-Installation Script
%post

# Remove unnecessary packages
#   (May be mixed for aarch64 and x86_64.
#    Some packages aren't installed already, but it's okay)
dnf remove -y iptables iptables-libs nftables firewalld* NetworkManager-team NetworkManager-tui iwl* dracut-config-rescue dracut-network dracut-squash ethtool dejavu-sans-fonts linux-firmware linux-firmware-whence dosfstools gawk-all-langpacks geolite2-city geolite2-country lsfw lsscsi mdadm nspr nss nss-util

# Remove the rescue ram
#   (to reduce more disk usage.
#    See also if you want to restore:
#    https://github.com/59RY/MyLinuxKickstart/blob/main/related/rhel9family-notice.md)
RESCUENAME=`ls /boot/vmlinuz-0-rescue-*`
grubby --remove-kernel=$RESCUENAME
rm --force /boot/initramfs-0-rescue-*.img
rm --force /boot/vmlinuz-0-rescue-*

# Re-enable locale-related environment variables on SSH
#   (to use Japanese Locale)
cat > /etc/ssh/sshd_config.d/50-languages.conf << EOF
# Accept locale-related environment variables
AcceptEnv LANG LC_CTYPE LC_NUMERIC LC_TIME LC_COLLATE LC_MONETARY LC_MESSAGES LC_PAPER LC_NAME LC_ADDRESS LC_TELEPHONE LC_MEASUREMENT LC_IDENTIFICATION LC_ALL LANGUAGE XMODIFIERS
EOF
chmod 600 /etc/ssh/sshd_config.d/50-languages.conf
chown root:root /etc/ssh/sshd_config.d/50-languages.conf

# Edit Configuration about cloud-init
sed -i -e 's!name: cloud-user!name: redhat!' /etc/cloud/cloud.cfg
sed -i -e 's!gecos: Cloud User!gecos: Red Hat Enterprise Linux!' /etc/cloud/cloud.cfg

# Regenerate initramfs
dracut -f --kver $(ls /boot/vmlinuz-* | cut -c 15-)

# Enable Services
systemctl enable sshd.service
systemctl enable cloud-init-local.service 
systemctl enable cloud-init.service
systemctl enable cloud-config.service
systemctl enable cloud-final.service

# Cleanup
#   (Almost all logs will be deleted
#    because of distribution images such as AWS AMIs.
#    If you want to see logs, comment this section)
dnf clean all
rm --force --recursive /var/lib/dnf/history*
rm --force /var/lib/rpm/__db*
find /var/log/ -type f -name \* -not -name 'README' -exec cp -f /dev/null {} \;
truncate -s 0 /etc/machine-id
truncate -s 0 /etc/hostname
truncate -s 0 /etc/resolv.conf
rm --force /etc/sysconfig/network-scripts/ifcfg-ens3
rm --force /var/lib/systemd/random-seed
rm --force /var/log/vmware*
rm --force /var/log/dnf*
rm --force /var/log/anaconda*
rm --force /root/.bash_history 
rm --force /root/.bash_logout
rm --force /root/anaconda-ks.cfg
rm --force /root/original-ks.cfg

# Delete root password
passwd --delete root

# Zerofill free space
#   (to reclaim space from deleted files -> shrink the snapshot size.
#    please don't worry that out-of-space error was expected)
echo "Zerofill free space. Please don't worry that out-of-space error was expected."
dd if=/dev/zero of=/zerofill bs=4K || :
rm --force /zerofill
%end

# After Installation, turn off the instance
poweroff
